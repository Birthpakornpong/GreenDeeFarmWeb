// pages/api/test-db.js - API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
import { testConnection } from '../../lib/mysql';

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    console.log('üß™ Testing database connection...');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• config (‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á password)
    const config = {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      database: process.env.DB_NAME,
      user: process.env.DB_USER,
      hasPassword: !!process.env.DB_PASSWORD,
      passwordLength: process.env.DB_PASSWORD?.length || 0
    };
    
    console.log('üìã Database config:', config);
    
    const isConnected = await testConnection();
    
    if (isConnected) {
      return res.status(200).json({
        success: true,
        message: '‚úÖ Database connection successful!',
        config: config
      });
    } else {
      return res.status(500).json({
        success: false,
        message: '‚ùå Database connection failed',
        config: config,
        suggestions: [
          '1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MySQL Server ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà',
          '2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hostname/IP address',
          '3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö port (‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏≠ 3306)',
          '4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏•‡∏∞ password',
          '5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database name',
          '6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö firewall settings',
          '7. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Plesk: ‡∏î‡∏π‡πÉ‡∏ô Databases > ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'
        ]
      });
    }
    
  } catch (error) {
    console.error('üí• Database test error:', error);
    return res.status(500).json({
      success: false,
      message: 'Database test failed',
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}