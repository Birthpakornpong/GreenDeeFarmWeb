// pages/api/create-users-table.js - API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡πÉ‡∏ô Supabase
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ 
      success: false, 
      error: 'Method not allowed. Use POST to create table.' 
    });
  }

  try {
    const { supabase } = await import('../../lib/supabase.js');
    
    console.log('üèóÔ∏è Creating users table in Supabase...');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏î‡πâ‡∏ß‡∏¢ SQL
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS users (
        id BIGSERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        full_name VARCHAR(100),
        phone VARCHAR(20),
        address TEXT,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );

      -- ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance
      CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
      CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);

      -- ‡∏™‡∏£‡πâ‡∏≤‡∏á function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-update updated_at
      CREATE OR REPLACE FUNCTION update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = NOW();
          RETURN NEW;
      END;
      $$ language 'plpgsql';

      -- ‡∏™‡∏£‡πâ‡∏≤‡∏á trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-update updated_at
      DROP TRIGGER IF EXISTS update_users_updated_at ON users;
      CREATE TRIGGER update_users_updated_at
          BEFORE UPDATE ON users
          FOR EACH ROW
          EXECUTE FUNCTION update_updated_at_column();
    `;

    // Execute SQL
    const { data, error } = await supabase.rpc('exec_sql', { 
      sql: createTableSQL 
    });

    if (error) {
      console.error('‚ùå Create table error:', error);
      
      // ‡∏´‡∏≤‡∏Å RPC exec_sql ‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
      if (error.code === '42883') { // function exec_sql does not exist
        return res.status(200).json({
          success: false,
          message: 'Need to create table manually in Supabase Dashboard',
          instructions: [
            '1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Supabase Dashboard ‚Üí SQL Editor',
            '2. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:',
            createTableSQL,
            '3. ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà Table Editor ‚Üí Create new table ‚Üí users',
            '4. ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
          ],
          manualSteps: {
            tableName: 'users',
            columns: [
              { name: 'id', type: 'int8', primary: true, autoIncrement: true },
              { name: 'username', type: 'varchar(50)', unique: true, nullable: false },
              { name: 'email', type: 'varchar(100)', unique: true, nullable: false },
              { name: 'password', type: 'varchar(255)', nullable: false },
              { name: 'full_name', type: 'varchar(100)', nullable: true },
              { name: 'phone', type: 'varchar(20)', nullable: true },
              { name: 'address', type: 'text', nullable: true },
              { name: 'created_at', type: 'timestamptz', default: 'now()' },
              { name: 'updated_at', type: 'timestamptz', default: 'now()' }
            ]
          }
        });
      }

      return res.status(500).json({
        success: false,
        error: error.message,
        code: error.code,
        details: error.details
      });
    }

    console.log('‚úÖ Users table created successfully');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('count(*)', { count: 'exact', head: true });

    return res.status(200).json({
      success: true,
      message: 'Users table created successfully!',
      data: data,
      testResult: {
        canRead: !testError,
        error: testError?.message || null
      },
      nextSteps: [
        '‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß',
        '‡∏´‡∏≤‡∏Å‡∏°‡∏µ RLS (Row Level Security) ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö policies'
      ]
    });

  } catch (error) {
    console.error('‚ùå Create table exception:', error);
    
    return res.status(500).json({
      success: false,
      message: 'Failed to create users table',
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}